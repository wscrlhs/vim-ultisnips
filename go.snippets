# Snippets for Go

priority -50

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "Package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# vim:ft=snippets:

# error handling
snippet err "Basic error handling" b
if err != nil {
	log.${1:Fatal}(err)
}
endsnippet


snippet date
${2:${1:`date +%d`}.`date +%m`}.`date +%Y`
endsnippet



# this is a private infra project
# model_attr.go 文件
snippet model_attr "model attributes" b
package model

import "database/sql/driver"

// ModelAttributes attr
type ModelAttributes struct {
	// 附加字段，保存未识别的字段
	Extra map[string]string \`attr:"extra:true"\`
}

// Scan 扫描
func (attr *ModelAttributes) Scan(value interface{}) error {
	return ScanAttr(attr, string(value.([]byte)))
}

// Value 序列化
func (attr ModelAttributes) Value() (driver.Value, error) {
	attrStr, e := ValueAttr(attr)
	return []byte(attrStr), e
}
endsnippet

# model_test.go 文件
snippet model_test "model test" b
package model_test

import (
	"shopsvr-infra/model"
	"testing"
)

func TestModel(t *testing.T) {
	// 允许并行测试
	t.Parallel()
	var offsetID int64
	pageSize := int64(100)
	var processedCount int64
	for {
		var ms []model.Model
		err := mainDB.Where("id > ?", offsetID).Order("id asc").Limit(pageSize).Find(&ms).Error
		if err != nil {
			t.Logf("%d", offsetID)
			t.Fatalf("test offsetID %d limit %d error: %+v", offsetID, pageSize, err)
		}
		if len(ms) == 0 {
			t.Logf("processed %d records", processedCount)
			break
		}
		for _, m := range ms {
			if m.ID > offsetID {
				offsetID = m.ID
			}
			processedCount++

		}
	}
}
endsnippet


# repository.go
snippet repository "repository" b
package repository

import (
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
)

// ModelRepository 数据源 
type ModelRepository interface {
	CommonRepository // 基础repository中提供的接口
}

// ModelRepository 数据源
type ModelRepository struct {
	*commonRepository
}

// MustNewModelRepository 新建数据源
func MustNewModelRepository(db *gorm.DB) ModelRepository {
	repo, err := NewModelRepository(db)
	if err != nil {
		panic(errors.WithStack(err))
	}
	return repo
}

// NewModelRepository 新建数据源
func NewModelRepository(db *gorm.DB) (repo ModelRepository, err error) {
	repo = &ModelRepository{
		commonRepository: mustNewCommonRepository(db),
	}
	return
}
endsnippet

# repository_test.go
snippet repository_test "model attributes" b
package repository_test

import (
	"shopsvr-infra/infra/testtool"
	"shopsvr-infra/persist/repository"
	"testing"
)

func TestModelRecord(t *testing.T) {
	// 允许并行测试
	t.Parallel()
	// 进行标准测试
	testRepository(t, repository.MustNewModelRepository, testtool.CreateTestModel)
}
endsnippet

#snippet attr "model attributes" b
#endsnippet

# this is a private balckcard project
snippet controller "controller" b
package controller

import (
	"blackcard-api/http/formatter"
	"blackcard-api/http/httpx"
	"shopsvr-infra/ecode"
	"shopsvr-infra/model"

	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/mvc"
)

// CtrController 控制器
type CtrController struct {
	*BaseController
}

// NewCtrController 新建控制器
func (base *BaseController) NewCtrController() *CtrController {
	return &CtrController{
		BaseController: base,
	}
}

// Get 
func (ctl *CtrController) Get(ctx iris.Context) mvc.Response {
    req := struct {
		SourceValue string                              \`json:"source_value"\`
	}{}
	//url参数解析
	err := ctl.ReadJSONValid(ctx, &req)
	if err != nil {
		return httpx.Error(ecode.ErrComBadParam)
	}
	ictx := ctl.context(ctx)
	err := ctl.services.GetAddressService().UpdateUserCityBySource(ictx, req.SourceType, req.SourceValue)
	if err != nil {
		return httpx.Error(err)
	}
	return httpx.Output("ok")

}

// BeforeActivation 兼容某些无法以方法名映射的路由
func (ctl *CtrController) BeforeActivation(b mvc.BeforeActivation) {
}
endsnippet

snippet service "model attributes" b
package sevservice

import (
	"blackcard-api/context"
	"shopsvr-infra/ecode"
	"shopsvr-infra/language"
	"shopsvr-infra/model"
	"shopsvr-infra/persist/repository"
	"strconv"

	"github.com/pkg/errors"
)

// SevService 服务
type SevService interface {
}

// sevService  服务
type sevService struct {
}

// NewSevService 创建服务
func NewSevService(
) (adSpaceServ SevService, err error) {
	return &sevService{
	}, nil
}
endsnippet
